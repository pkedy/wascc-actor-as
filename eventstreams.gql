#
# The list of types and operations supported by Event Streams capability providers
#

directive @namespace(name: String) on SCHEMA
directive @operation(name: String) on FIELD_DEFINITION
directive @rename(name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @unary on FIELD_DEFINITION
directive @map on FIELD_DEFINITION | INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION

schema @namespace(name: "wascc:eventstreams") {
  query: Query
  mutation: Mutation
}

"Signed 64-bit Integers"
scalar I64

"Unsigned 64-bit Integers"
scalar U64

"Used for ignored return values"
scalar Void

"Used for byte arrays/vectors"
scalar Bytes

"Query is currently unused"
type Query {
  "Satisfy the linter with a placeholder"
  placeholder: Boolean!
}

"Mutation represents all of the operations supported."
type Mutation {
    "Function called when an actor handles receipt of an event from a stream"
    deliverEvent(eventId: String!, stream: String!, values: [EventValuesInput!]! @map): Void! @operation(name: "DeliverEvent")
    "Called by an actor to write an event to a stream"
    writeEvent(eventId: String!, stream: String!, values: [EventValuesInput!]! @map): WriteResponse! @operation(name: "WriteEvent")
    "Called by an actor to query the contents of a stream"
    queryStream(streamId: String!, range: TimeRange, count: U64): StreamResults! @operation(name: "QueryStream")
}

"The map type for event values"
input EventValuesInput {
    "The value name"
    name: String!
    "The value"
    value: String!
}

"The results returned from the capability provider after a stream write"
type WriteResponse {
    "The ID of the event written"
    eventId: String!
}

"The results returned from the capability provider after querying a stream"
type StreamResults {
    "The events returned from the query"
    events: [Event!]!
}

"Represents a single, immutable event"
type Event {
    "The ID of the event"
    eventId: String!
    "The stream in which the event resides"
    stream: String!
    "The value map for the event"
    values: [EventValues!]! @map
}

"The map type for event values"
type EventValues {
    "The value name"
    name: String!
    "The value"
    value: String!
}

"Represents a time window for queries"
input TimeRange {
    "Minimum time in milliseconds since the epoch"
    minTime: U64!
    "Maximum time in milliseconds since the epoch"
    maxTime: U64!
}